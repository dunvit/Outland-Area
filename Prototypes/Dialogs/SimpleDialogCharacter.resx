<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="imageAvatar.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BrQJ/wekWz/Cfxy2aQAAAABJRU5ErkJggg==
</value>
  </data>
</root>